// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float2 Dimensions;
float Hue;

// https://forum.unity.com/threads/different-blending-modes-like-add-screen-overlay-changing-hue-tint.62507/#post-413034
float3 hsv_to_rgb(float3 hsv)
{
    float3 RGB = hsv.z;
    
    float var_h = hsv.x * 6;
    float var_i = floor(var_h);
    float var_1 = hsv.z * (1.0 - hsv.y);
    float var_2 = hsv.z * (1.0 - hsv.y * (var_h-var_i));
    float var_3 = hsv.z * (1.0 - hsv.y * (1-(var_h-var_i)));
    if      (var_i == 0) { RGB = float3(hsv.z, var_3, var_1); }
    else if (var_i == 1) { RGB = float3(var_2, hsv.z, var_1); }
    else if (var_i == 2) { RGB = float3(var_1, hsv.z, var_3); }
    else if (var_i == 3) { RGB = float3(var_1, var_2, hsv.z); }
    else if (var_i == 4) { RGB = float3(var_3, var_1, hsv.z); }
    else                 { RGB = float3(hsv.z, var_1, var_2); }
           
    return (RGB);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 rgb = hsv_to_rgb(float3(Hue, id.x / Dimensions.x, id.y / Dimensions.y));
    Result[id.xy] = float4(rgb.x, rgb.y, rgb.z, 1.0);
}
